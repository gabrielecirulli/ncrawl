// Generated by CoffeeScript 1.3.3
(function() {
  var Scan, async, dns, modules, net, queue, _,
    __slice = [].slice;

  async = require('async');

  dns = require('dns');

  net = require('net');

  _ = require('underscore');

  modules = require('./modules');

  queue = require('./queue');

  Scan = (function() {

    function Scan(id, target, options, reporter, queueDone, done) {
      var module, name, _ref,
        _this = this;
      this.id = id;
      this.target = target;
      this.options = options;
      this.reporter = reporter;
      this.queueDone = queueDone;
      this.done = done;
      this.totalModules = modules.amount();
      this.results = {};
      _ref = modules.modules;
      for (name in _ref) {
        module = _ref[name];
        this.results[name] = {
          error: true
        };
      }
      this.info = {
        target: this.target,
        id: this.id,
        mx: [],
        txt: [],
        srv: [],
        ns: [],
        cname: [],
        resolve: {},
        ip: null,
        hostname: null
      };
      if (net.isIP(this.target)) {
        this.info.isIP = true;
        this.info.ip = this.target;
        this.info.hostname = null;
      } else {
        this.info.isIP = false;
        this.info.ip = null;
        this.info.hostname = this.target;
      }
      this.dns(function() {
        var _ref1, _results;
        _this.call('info', _this.info);
        _ref1 = modules.modules;
        _results = [];
        for (name in _ref1) {
          module = _ref1[name];
          _results.push(_this.add(name, module));
        }
        return _results;
      });
    }

    Scan.prototype.call = function() {
      var args, name;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (_.isFunction(this.reporter[name])) {
        this.reporter[name].apply(this.reporter, args);
      }
      if (_.isFunction(this.options[name])) {
        return this.options[name].apply(this.options, args);
      }
    };

    Scan.prototype.dns = function(finish) {
      var next,
        _this = this;
      next = function() {
        _this.queueDone();
        return finish();
      };
      return async.series({
        reverse: function(callback) {
          return dns.resolve(_this.target, function(err, results) {
            if (err) {
              return callback();
            }
            if (results && !_this.info.ip) {
              _this.info.ip = results[0];
            }
            _this.info.resolve = {};
            return async.forEach(results, function(item, done) {
              return dns.reverse(item, function(err, results) {
                if (results && !_this.info.hostname) {
                  _this.info.hostname = results[0];
                }
                _this.info.resolve[item] = results;
                return done();
              });
            }, callback);
          });
        },
        mx: function(callback) {
          if (!_this.info.ip) {
            _this.results = {};
            _this.queueDone();
            return _this.finish();
          }
          if (!_this.info.hostname) {
            return next();
          }
          return dns.resolveMx(_this.info.hostname, function(err, records) {
            if (records) {
              _this.info.mx = records;
            }
            return callback();
          });
        },
        txt: function(callback) {
          return dns.resolveTxt(_this.info.hostname, function(err, records) {
            if (records) {
              _this.info.txt = records;
            }
            return callback();
          });
        },
        srv: function(callback) {
          return dns.resolveSrv(_this.info.hostname, function(err, records) {
            if (records) {
              _this.info.srv = records;
            }
            return callback();
          });
        },
        ns: function(callback) {
          return dns.resolveNs(_this.info.hostname, function(err, records) {
            if (records) {
              _this.info.ns = records;
            }
            return callback();
          });
        },
        cname: function(callback) {
          return dns.resolveCname(_this.info.hostname, function(err, records) {
            if (records) {
              _this.info.cname = records;
            }
            return callback();
          });
        },
        next: next
      });
    };

    Scan.prototype.identify = function(type) {
      if (!this.info.type) {
        this.info.type = [];
      }
      this.info.type.push(type);
      return this.call('identify', {
        type: type,
        id: this.id
      });
    };

    Scan.prototype.add = function(name, obj) {
      var _this = this;
      return queue.add(function(finished) {
        var module, start;
        start = Date.now();
        module = new obj.Module(_this.target, _this.options, _this.identify.bind(_this));
        return module.start(function(result) {
          if (result == null) {
            result = {};
          }
          result.finish = Date.now();
          result.start = start;
          result.took = result.finish - result.start;
          result.id = _this.id;
          result.port = obj.port;
          result.module = name;
          finished();
          if (!result.error || result.error && _this.options.errors) {
            _this.results[name] = result;
            _this.call('result', name, result);
          } else {
            delete _this.results[name];
          }
          if (--_this.totalModules === 0) {
            return _this.finish();
          }
        });
      });
    };

    Scan.prototype.finish = function() {
      if (Object.keys(this.results).length === 0 && !this.options.empty) {
        return this.done();
      }
      this.call('finish', this.info, this.results, this.id);
      return this.done();
    };

    return Scan;

  })();

  module.exports = Scan;

}).call(this);
