// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter2, Queue, Scan, colors, commands, fs, modules, ports, targets, totalSessions, _, _s,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter2 = require('eventemitter2').EventEmitter2;

  colors = require('colors');

  fs = require('fs');

  _s = require('underscore.string');

  _ = require('underscore');

  commands = require('./commands');

  modules = require('./modules');

  targets = require('./targets');

  Queue = require('./queue');

  ports = require('./ports');

  Scan = require('./scan');

  totalSessions = 0;

  module.exports = function(options) {
    var NCrawl;
    NCrawl = (function(_super) {

      __extends(NCrawl, _super);

      function NCrawl(options) {
        var target, _i, _len, _ref;
        this.options = options;
        this.stopScan = __bind(this.stopScan, this);

        this.sessionID = totalSessions++;
        commands.defaults(this.options);
        this.queue = new Queue(this.options.operations);
        if (this.options.reporter) {
          require("../reporters/" + this.options.reporter)(this);
        }
        this.modules = modules(this.options.modules);
        this.totalModules = Object.keys(this.modules).length;
        this.emit('modules parsed', {
          sessionID: this.sessionID,
          modules: this.modules
        });
        this.targets = targets(this.options.targets);
        this.totalTargets = this.targets.length;
        this.emit('targets parsed', {
          sessionID: this.sessionID,
          targets: this.targets
        });
        this.ports = ports(this.ports);
        this.totalPorts = this.ports.length;
        this.emit('ports parsed', {
          sessionID: this.sessionID,
          ports: this.ports
        });
        if (this.totalTargets === 0) {
          this.error(1, 'No targets selected');
        }
        if (this.totalModules === 0 && totalPorts === 0) {
          this.error(2, 'No modules or ports selected');
        }
        if (this.totalTargets === 0 || this.totalModules === 0 && totalPorts === 0) {
          return;
        }
        this.startTime = Date.now();
        this.completedScans = 0;
        this.remainingScans = 0;
        this.totalScans = 0;
        this.results = [];
        this.scans = {};
        this.progress();
        this.on('stop scan', this.stopScan);
        this.on('stop session', this.stopSession);
        this.on('new scan', this.newScan);
        _ref = this.targets;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          target = _ref[_i];
          this.emit('new scan', target);
        }
        this.emit('session start', {
          sessionID: this.sessionID,
          targets: this.targets,
          ports: this.ports,
          totalTargets: this.totalTargets,
          totalModules: this.totalModules
        });
      }

      NCrawl.prototype.stopSession = function() {
        var id, scan, _ref, _results;
        _ref = this.scans;
        _results = [];
        for (id in _ref) {
          scan = _ref[id];
          _results.push(scan.stop());
        }
        return _results;
      };

      NCrawl.prototype.stopScan = function(scanID) {
        if (this.scans[scanID]) {
          return this.scans[scanID].stop();
        } else {
          return this.error(3, 'Scan not found', false);
        }
      };

      NCrawl.prototype.newScan = function(target, callback) {
        var scanID,
          _this = this;
        scanID = this.totalScans++;
        this.remainingScans++;
        this.emit('scan queued', {
          scanID: scanID,
          sessionID: this.sessionID,
          target: target
        });
        return this.queue.add(function(queueDone) {
          var scan, self;
          _this.scans[scanID] = scan = new Scan({
            scanID: scanID,
            sessionID: _this.sessionID,
            target: target,
            options: _this.options,
            ports: _this.ports,
            queueDone: queueDone,
            totalModules: _this.totalModules,
            modules: _this.modules,
            queue: _this.queue
          });
          self = _this;
          scan.onAny(function() {
            var listener, _i, _len, _ref, _results;
            _ref = self.listeners(this.event);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              listener = _ref[_i];
              _results.push(listener.apply(scan, arguments));
            }
            return _results;
          });
          return scan.on('scan finish', function(info, results) {
            _this.completedScans++;
            _this.currentProgress += _this.progressIncrement;
            _this.results.push({
              info: info,
              results: results
            });
            if (--_this.remainingScans !== 0) {
              return;
            }
            _this.endTime = Date.now();
            return _this.emit('session finish', {
              start: _this.startTime,
              end: _this.endTime,
              took: _this.endTime - _this.startTime,
              sessionID: _this.sessionID,
              results: _this.results
            });
          });
        });
      };

      NCrawl.prototype.progress = function() {
        var lastUpdatedProgress, progressInterval,
          _this = this;
        this.progressIncrement = (this.totalModules / this.totalTargets) * 100 / this.totalModules;
        this.currentProgress = 0;
        lastUpdatedProgress = 0;
        progressInterval = setInterval(function() {
          var elapsed;
          if (lastUpdatedProgress === _this.currentProgress) {
            return;
          }
          lastUpdatedProgress = _this.currentProgress;
          elapsed = Date.now() - _this.startTime;
          return _this.emit('session progress', {
            sessionID: _this.sessionID,
            progress: _this.currentProgress,
            elapsed: elapsed,
            eta: elapsed * (_this.totalTargets / _this.completedScans - 1),
            totalScans: _this.totalScans,
            remainingScans: _this.remainingScans,
            completedScans: _this.completedScans
          });
        }, 2000);
        return this.on('session finish', function() {
          return clearInterval(progressInterval);
        });
      };

      NCrawl.prototype.error = function(code, message, fatal) {
        var err;
        if (fatal == null) {
          fatal = true;
        }
        err = new Error(message);
        err.code = code;
        err.fatal = fatal;
        return this.emit('error', err);
      };

      NCrawl.prototype.enable = function(key) {
        return this.set(key, true);
      };

      NCrawl.prototype.disable = function(key) {
        return this.set(key, false);
      };

      NCrawl.prototype.set = function(key, value) {
        key = _s.camelize(key.replace(' ', '-'));
        return this.options[key] = value;
      };

      return NCrawl;

    })(EventEmitter2);
    return new NCrawl(options);
  };

}).call(this);
