// Generated by CoffeeScript 1.3.3
(function() {
  var Scan, colors, commands, fs, modules, queue, targets, _;

  colors = require('colors');

  fs = require('fs');

  _ = require('underscore');

  commands = require('./commands');

  modules = require('./modules');

  targets = require('./targets');

  queue = require('./queue');

  Scan = require('./scan');

  process.stdin.resume();

  module.exports = function(options, complete) {
    var finish, i, increment, lastUpdatedProgress, progress, progressInterval, reporter, target, totalModules, totalTargets, _results;
    if (options.finish) {
      complete = options.finish;
    }
    modules.run(options.modules);
    queue.maxOperations(options.operations);
    reporter = options.reporter;
    if (_.isString(reporter)) {
      reporter = require(require.resolve("../reporters/" + options.reporter));
    }
    options = _.extend(options, reporter);
    if (options.before) {
      options.before();
    }
    if (!_.isArray(options.targets)) {
      targets = targets(options.targets);
    }
    totalTargets = targets.length;
    totalModules = modules.amount();
    if (!options.error) {
      options.error = function(code, msg) {
        throw new Error(msg);
      };
    }
    if (totalTargets === 0) {
      options.error(1, 'No targets selected');
    }
    if (totalModules === 0) {
      options.error(2, 'No modules selected');
    }
    if (totalTargets === 0 || totalModules === 0) {
      return complete();
    }
    if (options.start) {
      options.start({
        totalTargets: totalTargets,
        totalModules: totalModules
      });
    }
    increment = (totalModules / totalTargets) * 100 / totalModules;
    progress = 0;
    lastUpdatedProgress = 0;
    if (options.progressInterval) {
      progressInterval = setInterval(function() {
        return options.progress(progress);
      }, options.progressInterval);
    }
    finish = function() {
      clearInterval(progressInterval);
      if (options.after) {
        options.after();
      }
      if (options.end) {
        options.end();
      }
      return complete();
    };
    _results = [];
    for (i in targets) {
      target = targets[i];
      _results.push((function(i, target) {
        return queue.add(function(finished) {
          var scanReporter;
          scanReporter = new options.Reporter(target, options);
          return new Scan(+i, target, options, scanReporter, finished, function() {
            delete targets[i];
            progress += increment;
            if (!options.progressInterval && options.progress) {
              options.progress(progress);
            }
            if (--totalTargets === 0) {
              return finish();
            }
          });
        });
      })(i, target));
    }
    return _results;
  };

}).call(this);
