// Generated by CoffeeScript 1.3.3
(function() {
  var Scan, colors, commands, fs, modules, queue, targets, _;

  colors = require('colors');

  fs = require('fs');

  _ = require('underscore');

  commands = require('./commands');

  modules = require('./modules');

  targets = require('./targets');

  queue = require('./queue');

  Scan = require('./scan');

  module.exports = function(options) {
    var completedScans, currentProgress, finish, increment, lastUpdatedProgress, parsedTargets, progress, progressInterval, remainingScans, reporter, scanID, startTime, target, totalModules, totalTargets, _i, _len, _results;
    modules.run(options.modules);
    queue.maxOperations(options.operations);
    reporter = options.reporter;
    if (_.isString(reporter)) {
      reporter = require(require.resolve("../reporters/" + options.reporter));
    }
    options = _.extend(options, reporter);
    if (!_.isArray(options.targets)) {
      parsedTargets = targets.run(options.targets);
    }
    totalTargets = targets.amount();
    totalModules = modules.amount();
    if (!options.error) {
      options.error = function(code, msg) {
        throw new Error(msg);
      };
    }
    if (totalTargets === 0) {
      options.error(1, 'No targets selected');
    }
    if (totalModules === 0) {
      options.error(2, 'No modules selected');
    }
    if (totalTargets === 0 || totalModules === 0) {
      return;
    }
    if (options.before) {
      options.before({
        totalTargets: totalTargets,
        totalModules: totalModules
      });
    }
    increment = (totalModules / totalTargets) * 100 / totalModules;
    currentProgress = 0;
    lastUpdatedProgress = 0;
    completedScans = 0;
    startTime = Date.now();
    progress = function() {
      var elapsed;
      if (completedScans === 0) {
        return;
      }
      elapsed = Date.now() - startTime;
      return options.progress({
        progress: currentProgress,
        elapsed: elapsed,
        eta: elapsed * (totalTargets / completedScans - 1),
        totalScans: totalTargets,
        completedScans: completedScans
      });
    };
    if (options.progressInterval) {
      progressInterval = setInterval(progress, options.progressInterval);
    }
    finish = function() {
      clearInterval(progressInterval);
      if (options.after) {
        return options.after({
          start: startTime,
          end: Date.now(),
          took: Date.now() - startTime
        });
      }
    };
    remainingScans = totalTargets;
    scanID = 0;
    options.scanTarget = function(target, callback) {
      var id;
      id = scanID++;
      return queue.add(function(queueDone) {
        var scanReporter;
        scanReporter = new options.Reporter(target, options);
        return new Scan(id, target, options, scanReporter, queueDone, function() {
          if (callback) {
            callback();
          }
          completedScans++;
          currentProgress += increment;
          if (!options.progressInterval && options.progress) {
            progress();
          }
          if (--remainingScans === 0) {
            return finish();
          }
        });
      });
    };
    _results = [];
    for (_i = 0, _len = parsedTargets.length; _i < _len; _i++) {
      target = parsedTargets[_i];
      _results.push(options.scanTarget(target));
    }
    return _results;
  };

}).call(this);
