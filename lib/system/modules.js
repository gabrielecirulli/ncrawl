// Generated by CoffeeScript 1.3.3
(function() {
  var fs, path, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  path = require('path');

  fs = require('fs');

  _ = require('underscore');

  module.exports = function(enabled) {
    var module, modules, modulesDir, _fn, _i, _len, _ref;
    if (enabled == null) {
      enabled = ['all'];
    }
    if (_.isString(enabled)) {
      enabled = (function() {
        var _i, _len, _ref, _results;
        _ref = enabled.split(',');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          module = _ref[_i];
          _results.push(module.toLowerCase().trim());
        }
        return _results;
      })();
    }
    modulesDir = "" + __dirname + "/../modules";
    modules = {};
    _ref = fs.readdirSync(modulesDir);
    _fn = function(module) {
      var device, file, identities, identitiesDir, line, middlewareDir, moduleDir, name, _j, _k, _l, _len1, _len2, _len3, _ref1, _ref2, _ref3, _results;
      if (!(__indexOf.call(enabled, 'all') >= 0 || __indexOf.call(enabled, module) >= 0)) {
        return;
      }
      moduleDir = "" + modulesDir + "/" + module;
      module = modules[module] = require(require.resolve("" + moduleDir + "/" + module));
      module.middleware = [];
      module.identities = {};
      module.runMiddleware = function() {
        var args, data, finished, middleware, next, _j;
        args = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), finished = arguments[_j++];
        middleware = _.clone(module.middleware);
        data = {};
        next = function() {
          var fn;
          fn = middleware.shift();
          if (!fn) {
            return finished({
              data: data
            });
          }
          return fn.apply(null, args);
        };
        args.unshift(data);
        args.unshift(next);
        return next();
      };
      identitiesDir = "" + moduleDir + "/identities";
      if (fs.existsSync(identitiesDir)) {
        _ref1 = fs.readdirSync(identitiesDir);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          name = _ref1[_j];
          file = fs.readFileSync("" + identitiesDir + "/" + name, 'utf8');
          name = path.basename(name, path.extname(name));
          identities = module.identities[name] = {};
          _ref2 = file.split("\n");
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            line = _ref2[_k];
            line = line.split(' ');
            device = line.shift();
            line = line.join(' ');
            line = line.trim();
            if (!identities[device]) {
              identities[device] = [];
            }
            identities[device].push(line);
          }
        }
      }
      middlewareDir = "" + moduleDir + "/middleware";
      if (!fs.existsSync(middlewareDir)) {
        return;
      }
      _ref3 = fs.readdirSync(middlewareDir);
      _results = [];
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        name = _ref3[_l];
        _results.push(module.middleware.push(require("" + middlewareDir + "/" + name)));
      }
      return _results;
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      module = _ref[_i];
      _fn(module);
    }
    return modules;
  };

}).call(this);
